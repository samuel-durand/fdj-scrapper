╔══════════════════════════════════════════════════════════════╗
║    🚀 DÉPLOYER TON BACKEND - GUIDE ULTRA-RAPIDE             ║
╚══════════════════════════════════════════════════════════════╝

⚠️  PROBLÈME : O2switch ne supporte PAS Node.js !
✅  SOLUTION : Déployer le backend ailleurs (GRATUIT)


═══════════════════════════════════════════════════════════════
  📋 ARCHITECTURE FINALE (tout gratuit !)
═══════════════════════════════════════════════════════════════

Frontend React    →  O2switch (déjà payé)
Backend Node.js   →  Render.com (GRATUIT)
MongoDB          →  MongoDB Atlas (GRATUIT)


═══════════════════════════════════════════════════════════════
  🗄️  ÉTAPE 1 : MongoDB Atlas (Base de données)
═══════════════════════════════════════════════════════════════

1. Aller sur https://www.mongodb.com/cloud/atlas
2. Créer un compte (gratuit)
3. Créer un cluster :
   - Choisir "FREE" (M0)
   - Region : Frankfurt
4. Database Access :
   - Ajouter un utilisateur
   - Username : loterie-admin
   - Password : (note-le bien !)
5. Network Access :
   - "Add IP Address"
   - "Allow access from anywhere" (0.0.0.0/0)
6. Connect :
   - "Connect your application"
   - Copier la connection string :
   
   mongodb+srv://loterie-admin:TON_PASSWORD@cluster0.xxxxx.mongodb.net/loterie-fdj

   ⚠️ Remplace <password> par ton mot de passe !


═══════════════════════════════════════════════════════════════
  🚀 ÉTAPE 2 : Render.com (Backend Node.js)
═══════════════════════════════════════════════════════════════

1. Aller sur https://render.com
2. S'inscrire avec GitHub
3. "New" → "Web Service"
4. Connecter ton repo GitHub (samuel-durand/fdj-scrapper)
5. Configurer :
   
   Name             : loterie-backend
   Region           : Frankfurt
   Branch           : main
   Root Directory   : backend
   Runtime          : Node
   Build Command    : npm install
   Start Command    : npm start

6. Variables d'environnement (cliquer "Add Environment Variable") :
   
   MONGODB_URI      = mongodb+srv://loterie-admin:TON_PASSWORD@...
   JWT_SECRET       = ton_secret_super_securise_12345
   PORT             = 5000
   FRONTEND_URL     = http://resultat-fdj.soqe8286.odns.fr

7. Cliquer "Create Web Service"
8. Attendre 5-10 minutes...
9. Une fois déployé, copier l'URL :
   
   https://loterie-backend.onrender.com


═══════════════════════════════════════════════════════════════
  🌐 ÉTAPE 3 : Connecter le Frontend au Backend
═══════════════════════════════════════════════════════════════

1. Sur ton PC, créer le fichier : .env.production
   
   VITE_API_URL=https://loterie-backend.onrender.com/api

2. Vérifier que src/services/api.js utilise la variable :
   
   const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api'

3. Build le frontend :
   
   npm run build

4. Upload dist/ vers o2switch via FTP (comme d'habitude)


═══════════════════════════════════════════════════════════════
  🔐 ÉTAPE 4 : Créer l'utilisateur Admin
═══════════════════════════════════════════════════════════════

Option A : En local puis sync la DB
────────────────────────────────────
1. Dans backend/.env (en local) :
   MONGODB_URI=mongodb+srv://loterie-admin:TON_PASSWORD@...

2. Lancer :
   cd backend
   npm run create-admin

3. Les données sont automatiquement dans MongoDB Atlas !


Option B : Via Render Shell
────────────────────────────────────
1. Sur Render.com, aller dans ton service
2. Shell (en haut à droite)
3. Taper :
   npm run create-admin


═══════════════════════════════════════════════════════════════
  ✅ ÉTAPE 5 : Tester
═══════════════════════════════════════════════════════════════

1. Tester le backend :
   https://loterie-backend.onrender.com/api/health
   
   Devrait retourner : {"status":"OK","message":"Server is running"}

2. Tester le frontend :
   http://resultat-fdj.soqe8286.odns.fr
   
   - S'inscrire
   - Se connecter
   - Générer des numéros
   - Sauvegarder une combinaison
   - Accéder au panel admin (avec le compte admin)


═══════════════════════════════════════════════════════════════
  💰 COÛTS
═══════════════════════════════════════════════════════════════

Render.com (Backend)     : 0€ / mois (750h gratuites)
MongoDB Atlas (DB)       : 0€ / mois (512MB gratuits)
O2switch (Frontend)      : Déjà payé

TOTAL : 0€ / mois ! 🎉


═══════════════════════════════════════════════════════════════
  ⚠️  LIMITATIONS (avec plan gratuit)
═══════════════════════════════════════════════════════════════

Render Free :
- Le backend s'endort après 15 min d'inactivité
- Première requête après sommeil : 10-15 secondes
- Ensuite : rapide !

Solution : Utiliser UptimeRobot (gratuit) pour ping toutes les 5 min


═══════════════════════════════════════════════════════════════
  🔥 PROBLÈMES COURANTS
═══════════════════════════════════════════════════════════════

1. "CORS Error" dans la console
───────────────────────────────────
   → Vérifier FRONTEND_URL dans Render
   → Vérifier CORS dans backend/server.js

2. "Failed to fetch" lors de la connexion
───────────────────────────────────
   → Vérifier VITE_API_URL dans .env.production
   → Rebuild le frontend : npm run build

3. "MongoNetworkError"
───────────────────────────────────
   → Vérifier Network Access (0.0.0.0/0) dans MongoDB Atlas
   → Vérifier la connection string (mot de passe)


═══════════════════════════════════════════════════════════════
  🎯 RÉSUMÉ EN 5 ÉTAPES
═══════════════════════════════════════════════════════════════

1️⃣  MongoDB Atlas  → Créer DB gratuite + copier connection string
2️⃣  Render.com     → Déployer backend + variables d'env
3️⃣  .env.production → Ajouter URL backend
4️⃣  npm run build  → Build frontend avec backend de prod
5️⃣  Upload dist/   → Vers o2switch via FTP

C'EST TOUT ! 🚀


═══════════════════════════════════════════════════════════════
  📚 DOCUMENTATION COMPLÈTE
═══════════════════════════════════════════════════════════════

Voir : DEPLOIEMENT-BACKEND-FRONTEND.md


═══════════════════════════════════════════════════════════════
            Tout est gratuit et scalable ! 🎉
═══════════════════════════════════════════════════════════════

